// HSD generated

#include <algorithm>
#include <iterator>
#include <SMCE/internal/BoardDeviceSpecification.hpp>
#include <SMCE_rt/internal/host_rt.hpp>
#include "@GENERATED_DEVICE@.hpp"

namespace smce_rt {
struct Impl {};
}

@GENERATED_DEVICE@::@GENERATED_DEVICE@(@GENERATED_DEVICE_CTOR_ARGS@) : @GENERATED_DEVICE_CTOR_INIT@ {}

std::vector<@GENERATED_DEVICE@> @GENERATED_DEVICE@::getObjects(smce::BoardView& bv) {
    auto bases = smce_rt::getBases(bv, "@GENERATED_DEVICE@");
    std::vector<@GENERATED_DEVICE@> ret;
    ret.reserve(bases.count);
    std::generate_n(std::back_inserter(ret), bases.count, [&]{
        auto dev = @GENERATED_DEVICE@{@GENERATED_DEVICE_CTOR_CALL@};
        @GENERATED_DEVICE_FIELDS_ASSIGN@
        return dev;
    });
    return ret;
}

const smce::BoardDeviceSpecification& @GENERATED_DEVICE@::specification{
  "@GENERATED_DEVICE_SPECSTRING@",
  "@GENERATED_DEVICE@",
  @GENERATED_DEVICE_r8_COUNT@,
  @GENERATED_DEVICE_r16_COUNT@,
  @GENERATED_DEVICE_r32_COUNT@,
  @GENERATED_DEVICE_r64_COUNT@,
  @GENERATED_DEVICE_a8_COUNT@,
  @GENERATED_DEVICE_a16_COUNT@,
  @GENERATED_DEVICE_a32_COUNT@,
  @GENERATED_DEVICE_a64_COUNT@,
  @GENERATED_DEVICE_mtx_COUNT@,
};
